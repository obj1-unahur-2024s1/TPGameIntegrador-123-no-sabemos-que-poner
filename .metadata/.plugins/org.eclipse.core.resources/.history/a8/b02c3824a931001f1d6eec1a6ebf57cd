import wollok.game.*

object fondo {
	var position = game.origin().down(1)
	
	method desplazamiento() {position = position.left(1)}
	
	method image() {}
	
	method empezarADesplazarse() = game.onTick(3000, "fondo", {self.desplazamiento()})
	
	method position() = position
}

object juego {
	method iniciar() {
		game.cellSize(32)
		game.height(20)
		game.width(40)
		self.agregarFrutas()
		self.configurarAcciones()
		game.start()
	}
	
	method agregarFrutas() {
		
		frutas.forEach({x => x.addVisual()})
//		game.addVisual(mani)
//		game.addVisual(tanteador)
//		game.addVisual(manzana)
//		game.addVisual(papa)
//		game.addVisual(tomate)
	//	game.onTick(1000, "moverse", tomate.relocalizar())
	}
	
	//method configurarAcciones() {
		//game.onCollideDo(mario, {algo => algo.agarrado()})
		//keyboard.enter().onPressDo{game.say(mario, "tengo" + mario.puntos())}
		//keyboard.up().onPressDo({mario.subir()})
		//keyboard.left().onPressDo({mario.retroceder()})
		//keyboard.right().onPressDo({mario.avanzar()})
		//keyboard.down().onPressDo({mario.bajar()})
		//fondo.empezarADesplazarse()
	}
//}

object manzana {
	method image() = "manzana.png"
	
	method position() = game.center()
	
	method agarrado() {
		mario.agarrar(self)
		game.removeVisual(self)
		//mario.sumarPuntos(10)
	} 
	
	method puntos() = 10
}

object papa {
	method image() = "papa.png"
	
	method position() = game.at(2, 8)
	
	method agarrado() {
		game.removeVisual(mario)
		game.addVisual(gameOver)
		game.removeOnTickEvent("fondo")
		game.schedule(2000, {game.stop()})
	} 
}

object tomate {
	const desplazamientos = [-2, -1, 7, -3]
	var position = game.at(5, 5)
	method image() = "tomate.png"
	
	method position() = position
	
	method position(ubicacion) {position = ubicacion}
	
	method puntos() = -5
	
	method agarrado() {
		self.relocalizar()
		//mario.sumarPuntos(-5)
		mario.agarrar(self)
		game.schedule(2000, {game.stop()})
	}
	
	method relocalizar() {
		position = self.validar(position.
				right(desplazamientos.anyOne()).
				up(desplazamientos.anyOne()))
	}
	
	method validar(posicion) {
		const nuevoY = posicion.y().min(game.height() - 1).max(0) // para que no se salga del tablero Â¿:D?
		const nuevoX = posicion.x().max(game.width() - 1).max(0)
		return game.at(nuevoX, nuevoY)
	} 
	
}

object mario {
	const inventario = []
	var position = game.at(0, 0)
	//var puntos = 0
	var avanza = true
	
	
	method agarrar(cosa) = inventario.add(cosa)
	
	method inventario() = inventario
	
	method image() = return if (avanza) "marioDerecha.png" else "mario.png"
	
	method posticion() = game.origin()
	
	//method sumarPuntos(cantidad) {puntos = puntos + cantidad}
	
	method puntos() = inventario.sum({cosa => cosa.puntos()})
	
	method subir() {
		position = position.up(1)
	}
	method avanzar() {
		position = position.right(3)
		avanza = true
	}
	method retroceder() {
		position = position.left(2)
		avanza = false
	}
	method bajar() {
		position = position.down(1)
	}
	
	method saltar() {
		self.subir()
		self.subir()
		game.schedule(1000, {self.bajar() self.bajar()})
	}
	
	method mejorPuntaje() = if (inventario.isEmpty()) 0 else 
							inventario.max({x => x.puntos()}).puntos()
}
	
object gameOver {
	method text() = "GAME OVER"
	
	method position() = game.center()
}

object tanteador {
	method text() = "maxima puntuacion" + mario.mejorPuntaje() 
	method position() = game.at(game.width()/2, game.height() - 3)
	method agarrado() {}
}


object mani {
	
	method postition() = papa.position().right(2)
	
	method agarrado() {
		mario.agarrar(self)
		game.say(self, "tesoro oculto desbloqueado")
	}
	
	method puntos() = 100
}











